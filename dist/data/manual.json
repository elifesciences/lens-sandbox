{
  "id": "manual",
  "schema": [
    "substance-article",
    "0.1.0"
  ],
  "nodes": {
    "document": {
      "type": "document",
      "id": "document",
      "views": [
        "content"
      ],
      "guid": "manual",
      "creator": "",
      "title": "",
      "abstract": "",
      "published_on": "2013-10-04T15:57:36.482Z",
      "meta": {}
    },
    "content": {
      "type": "view",
      "id": "content",
      "nodes": [
        "text_1",
        "header_1",
        "text_2",
        "header_2",
        "text_3",
        "header_3",
        "text_4",
        "text_5",
        "text_6",
        "text_7",
        "list_1",
        "header_4",
        "text_11",
        "text_12",
        "figure_1",
        "header_5",
        "text_13",
        "figure_2",
        "header_6",
        "text_14",
        "figure_3",
        "text_15",
        "codeblock_1",
        "text_16",
        "header_7",
        "text_17",
        "text_18",
        "codeblock_2",
        "text_19",
        "header_8",
        "text_20",
        "header_9",
        "list_2",
        "text_23",
        "header_10",
        "text_24",
        "codeblock_3",
        "text_25",
        "codeblock_4",
        "text_26",
        "codeblock_5",
        "text_27",
        "codeblock_6",
        "text_28",
        "header_11",
        "text_29",
        "codeblock_7",
        "text_30",
        "codeblock_8",
        "header_12",
        "text_31",
        "header_13",
        "text_32",
        "text_33",
        "codeblock_9",
        "text_34",
        "codeblock_10",
        "text_35",
        "text_36",
        "codeblock_11",
        "header_14",
        "text_37",
        "text_38",
        "codeblock_12",
        "text_39",
        "header_15",
        "text_40",
        "text_41",
        "codeblock_13",
        "text_42",
        "codeblock_14",
        "text_43",
        "codeblock_15",
        "text_44",
        "codeblock_16",
        "text_45",
        "codeblock_17",
        "text_46",
        "codeblock_18",
        "text_47",
        "codeblock_19"
      ]
    },
    "text_1": {
      "type": "text",
      "id": "text_1",
      "source_id": null,
      "content": "This documentation is a work-in-progress. However, it reflects the latest state of Lens development and provides documentation for the new 0.2.x series of Lens. You can contribute to this manual by making changes to the source markdown file."
    },
    "header_1": {
      "type": "heading",
      "id": "header_1",
      "source_id": "introduction",
      "content": "Introduction",
      "level": 1
    },
    "text_2": {
      "type": "text",
      "id": "text_2",
      "source_id": null,
      "content": "eLife Lens provides a novel way of looking at content on the web. It is designed to make life easier for researchers, reviewers, authors and readers. For example, have you tried to look at a figure in an online article, while at the same time trying to see what the author says about the figure, jumping all around the article, losing track of what you were looking for in the first place? The reason for this is that most online research articles are published in a fixed digital version of the original paper. With eLife Lens, we take full advantage of the Internetâ€™s flexibility."
    },
    "header_2": {
      "type": "heading",
      "id": "header_2",
      "source_id": "the-big-picture",
      "content": "The Big Picture",
      "level": 2
    },
    "text_3": {
      "type": "text",
      "id": "text_3",
      "source_id": null,
      "content": "Lens has a pretty simple architecture. It is a stand-alone web component that can be embedded into any web page. Lens can display any NLM XML document and alternatively the Lens-native JSON representation. What's important to note is that Lens doesn't dictate a specific architecture for content hosting. Anyone (even authors) can host their own documents and customized Lens instances."
    },
    "header_3": {
      "type": "heading",
      "id": "header_3",
      "source_id": "the-lens-article-format",
      "content": "The Lens Article Format",
      "level": 2
    },
    "text_4": {
      "type": "text",
      "id": "text_4",
      "source_id": null,
      "content": "The Lens Article Format is an implementation of the Substance Document Model dedicated to scientific content. It features basic content types such as paragraphs, headings, as well as figure types such as images, tables and videos complete with captions and cross-references."
    },
    "text_5": {
      "type": "text",
      "id": "text_5",
      "source_id": null,
      "content": "The document definitions can easily be extended. You can either create your own flavour or contribute to the Lens Article Format directly. We have auto-generated documentation for the latest Lens Article spec."
    },
    "text_6": {
      "type": "text",
      "id": "text_6",
      "source_id": null,
      "content": "Do we really need another spec for scientific documents?"
    },
    "text_7": {
      "type": "text",
      "id": "text_7",
      "source_id": null,
      "content": "We believe so for the following reasons:"
    },
    "text_8": {
      "type": "text",
      "id": "text_8",
      "source_id": null,
      "content": "XML-based formats such as NLM are hard to consume by web clients."
    },
    "text_9": {
      "type": "text",
      "id": "text_9",
      "source_id": null,
      "content": "Strict separation of content and style is important. Existing formats target print, and thus contain style information which makes them hard to process by computer programs."
    },
    "text_10": {
      "type": "text",
      "id": "text_10",
      "source_id": null,
      "content": "The greatest advantage of Lens Articles is that any of them can be viewed in Lens, a modern web-based interface for consuming science content."
    },
    "list_1": {
      "type": "list",
      "id": "list_1",
      "source_id": "",
      "items": [
        "text_8",
        "text_9",
        "text_10"
      ],
      "ordered": false
    },
    "header_4": {
      "type": "heading",
      "id": "header_4",
      "source_id": "nodes",
      "content": "Nodes",
      "level": 3
    },
    "text_11": {
      "type": "text",
      "id": "text_11",
      "source_id": null,
      "content": "Lens articles are data-centric representations of digital content. Each content element lives as a node in a flat address space, identified by a unique id. Think of it as a database of independent content fragments."
    },
    "text_12": {
      "type": "text",
      "id": "text_12",
      "source_id": null,
      "content": "The following graphic shows a sample document containing a heading (h1), paragraph (p1), and formula (f1). It also has an image (i1) and a table (t1) as well as two citations (c1 and c2)."
    },
    "figure_1": {
      "type": "figure",
      "id": "figure_1",
      "url": "http://f.cl.ly/items/060x2w1f2r1A3y3D3z2w/lens-document-nodes.png",
      "label": "",
      "caption": null
    },
    "header_5": {
      "type": "heading",
      "id": "header_5",
      "source_id": "views",
      "content": "Views",
      "level": 3
    },
    "text_13": {
      "type": "text",
      "id": "text_13",
      "source_id": null,
      "content": "Now these building blocks of a document are organized using views. The main body of the document is referenced in the content view. Figures (like images and tables) are kept in the figures view while citations live in citations respectively."
    },
    "figure_2": {
      "type": "figure",
      "id": "figure_2",
      "url": "http://f.cl.ly/items/0J3m3D3Z2u3E292A1j3T/lens-document-views.png",
      "label": "",
      "caption": null
    },
    "header_6": {
      "type": "heading",
      "id": "header_6",
      "source_id": "the-lens-converter",
      "content": "The Lens Converter",
      "level": 2
    },
    "text_14": {
      "type": "text",
      "id": "text_14",
      "source_id": null,
      "content": "Lens can natively read the JATS (formerly NLM) format, thanks to its built-in converter."
    },
    "figure_3": {
      "type": "figure",
      "id": "figure_3",
      "url": "http://f.cl.ly/items/1S1p1L3s2d0a0T372I0v/Screen%20Shot%202013-09-12%20at%2012.56.21%20AM.png",
      "label": "",
      "caption": null
    },
    "text_15": {
      "type": "text",
      "id": "text_15",
      "source_id": null,
      "content": "Conversion is done on the client side using the browser-native DOM Parser. Using it is simle:"
    },
    "codeblock_1": {
      "type": "codeblock",
      "id": "codeblock_1",
      "source_id": "",
      "content": "var importer = new LensImporter();\nvar doc = importer.import(xmlData, {\n  baseURL: \"http://docs.example.com/doc-25/\" // this path is used to resolve relative images\n});"
    },
    "text_16": {
      "type": "text",
      "id": "text_16",
      "source_id": null,
      "content": "The converter can handle any NLM-compatible file. Some portions are publisher-specific, like resolving the url's for figures and videos. This is done in configurations. We have implemented configurations for eLife, Landes Bioscience and PLOS."
    },
    "header_7": {
      "type": "heading",
      "id": "header_7",
      "source_id": "website-integration",
      "content": "Website Integration",
      "level": 1
    },
    "text_17": {
      "type": "text",
      "id": "text_17",
      "source_id": null,
      "content": "The easiest way to integrate Lens into your website is by creating one HTML file per document and adapt the url to the document you want to display."
    },
    "text_18": {
      "type": "text",
      "id": "text_18",
      "source_id": null,
      "content": "Just take the contents from the bundled distribution, then adjust the document_url parameter in index.html."
    },
    "codeblock_2": {
      "type": "codeblock",
      "id": "codeblock_2",
      "source_id": "",
      "content": "var app = new Lens({\n  // Endpoint must have CORS enabled, or file is served from the same domain as the app\n  document_url: \"https://s3.amazonaws.com/elife-cdn/elife-articles/00778/elife00778.xml\"\n});"
    },
    "text_19": {
      "type": "text",
      "id": "text_19",
      "source_id": null,
      "content": "Keep in mind, with eLife Lens you can display any NLM-compatible XML file or JSON documents that conforms to the Lens Article spec. You can enrich your HTML file with <meta> tags etc. to ensure Google crawlablility. There is no server infrastructure needed to run Lens. It's 100% browser-based. If you have questions please consult the Lens Mailinglist."
    },
    "header_8": {
      "type": "heading",
      "id": "header_8",
      "source_id": "installation-of-the-development-environment",
      "content": "Installation of the development environment",
      "level": 1
    },
    "text_20": {
      "type": "text",
      "id": "text_20",
      "source_id": null,
      "content": "It's fairly easy to install and run the latest Lens development environment locally."
    },
    "header_9": {
      "type": "heading",
      "id": "header_9",
      "source_id": "prerequisites",
      "content": "Prerequisites",
      "level": 2
    },
    "text_21": {
      "type": "text",
      "id": "text_21",
      "source_id": null,
      "content": "Node.js >=0.8.x"
    },
    "text_22": {
      "type": "text",
      "id": "text_22",
      "source_id": null,
      "content": "Pandoc >= 1.12.02 (for on-the-fly generation of the Lens manual from Markdown)"
    },
    "list_2": {
      "type": "list",
      "id": "list_2",
      "source_id": "",
      "items": [
        "text_21",
        "text_22"
      ],
      "ordered": false
    },
    "text_23": {
      "type": "text",
      "id": "text_23",
      "source_id": null,
      "content": "Node.js is just used as a development environment. You'll soon be able to create self-contained packages of individual modules or the main app itself."
    },
    "header_10": {
      "type": "heading",
      "id": "header_10",
      "source_id": "fresh-install",
      "content": "Fresh install",
      "level": 2
    },
    "text_24": {
      "type": "text",
      "id": "text_24",
      "source_id": null,
      "content": "First install the Substance Screwdriver command line utility. It's just a little helper that makes dealing with our many modules easier."
    },
    "codeblock_3": {
      "type": "codeblock",
      "id": "codeblock_3",
      "source_id": "",
      "content": "$ git clone https://github.com/substance/screwdriver.git\n$ cd screwdriver\n$ sudo python setup.py install"
    },
    "text_25": {
      "type": "text",
      "id": "text_25",
      "source_id": null,
      "content": "Clone the Lens Mothership"
    },
    "codeblock_4": {
      "type": "codeblock",
      "id": "codeblock_4",
      "source_id": "",
      "content": "$ git clone https://github.com/elifesciences/lens.git"
    },
    "text_26": {
      "type": "text",
      "id": "text_26",
      "source_id": null,
      "content": "Run the update command, which pulls in all the sub-modules and dependencies"
    },
    "codeblock_5": {
      "type": "codeblock",
      "id": "codeblock_5",
      "source_id": "",
      "content": "$ cd lens\n$ substance --update"
    },
    "text_27": {
      "type": "text",
      "id": "text_27",
      "source_id": null,
      "content": "Finally start the server"
    },
    "codeblock_6": {
      "type": "codeblock",
      "id": "codeblock_6",
      "source_id": "",
      "content": "$ substance"
    },
    "text_28": {
      "type": "text",
      "id": "text_28",
      "source_id": null,
      "content": "You can have a look at the example document, by pointing your browser to http://localhost:4000/#lens/lorem_ipsum, view the autogenerated Lens.Article documentation here http://localhost:4000/#lens/lens_article or the manual http://localhost:4000/#lens/manual."
    },
    "header_11": {
      "type": "heading",
      "id": "header_11",
      "source_id": "keep-your-local-version-in-sync",
      "content": "Keep your local version in sync",
      "level": 2
    },
    "text_29": {
      "type": "text",
      "id": "text_29",
      "source_id": null,
      "content": "You may want to pull in updates every now and then, which is simple. In the Lens project root dir do:"
    },
    "codeblock_7": {
      "type": "codeblock",
      "id": "codeblock_7",
      "source_id": "",
      "content": "$ substance --update"
    },
    "text_30": {
      "type": "text",
      "id": "text_30",
      "source_id": null,
      "content": "And start the dev environment again."
    },
    "codeblock_8": {
      "type": "codeblock",
      "id": "codeblock_8",
      "source_id": "",
      "content": "$ substance"
    },
    "header_12": {
      "type": "heading",
      "id": "header_12",
      "source_id": "configuration",
      "content": "Configuration",
      "level": 2
    },
    "text_31": {
      "type": "text",
      "id": "text_31",
      "source_id": null,
      "content": "By default your local Lens installations serves a bunch of example documents plus Lens related documents. However you can easily configure Lens so it fetches content from a different source by adapting config/config.json to your needs."
    },
    "header_13": {
      "type": "heading",
      "id": "header_13",
      "source_id": "contributing",
      "content": "Contributing",
      "level": 1
    },
    "text_32": {
      "type": "text",
      "id": "text_32",
      "source_id": null,
      "content": "I'm assuming here that you have push access to the repositories, because as a start I'd like to get the Lens core dev team up and running. I'll provide documentation on how to work with a forked version of a module and submit a pull request soon."
    },
    "text_33": {
      "type": "text",
      "id": "text_33",
      "source_id": null,
      "content": "Say you've made changes to the Lens.Article module. In order to commit them you simply have to navigate to node_modules/lens-article and do:"
    },
    "codeblock_9": {
      "type": "codeblock",
      "id": "codeblock_9",
      "source_id": "",
      "content": "$ git add <YOUR STUFF>\n$ git commit -m \"Fixed X\"\n$ git push"
    },
    "text_34": {
      "type": "text",
      "id": "text_34",
      "source_id": null,
      "content": "Alternatively, if you are working on breaking changes you can switch to a different branch, and submit a pull request using the Github interface. Here's how:"
    },
    "codeblock_10": {
      "type": "codeblock",
      "id": "codeblock_10",
      "source_id": "",
      "content": "$ git checkout -b my_feature_branch\n$ git add <YOUR STUFF>\n$ git commit -m \"Fixed X\"\n$ git push"
    },
    "text_35": {
      "type": "text",
      "id": "text_35",
      "source_id": null,
      "content": "Then go to Github and submit a pull request."
    },
    "text_36": {
      "type": "text",
      "id": "text_36",
      "source_id": null,
      "content": "Another hint: To pull in upstream changes from master for the entire project do this:"
    },
    "codeblock_11": {
      "type": "codeblock",
      "id": "codeblock_11",
      "source_id": "",
      "content": "$ substance --git -- pull origin master:<feature_branch_name>"
    },
    "header_14": {
      "type": "heading",
      "id": "header_14",
      "source_id": "adjusting-styles",
      "content": "Adjusting styles",
      "level": 2
    },
    "text_37": {
      "type": "text",
      "id": "text_37",
      "source_id": null,
      "content": "Most customization can be done using CSS without interfering with the Lens codebase. You only override styles on the application level."
    },
    "text_38": {
      "type": "text",
      "id": "text_38",
      "source_id": null,
      "content": "Say you'd like to like to color citation cards red."
    },
    "codeblock_12": {
      "type": "codeblock",
      "id": "codeblock_12",
      "source_id": "",
      "content": "#my_app .article .citations .resource-header {\n  background: red;\n}"
    },
    "text_39": {
      "type": "text",
      "id": "text_39",
      "source_id": null,
      "content": "You've got the basic idea, now it's on you. It should be easy to pull in changes from the official Lens modules, without breaking your customized app."
    },
    "header_15": {
      "type": "heading",
      "id": "header_15",
      "source_id": "implement-a-new-node-type",
      "content": "Implement a new node type",
      "level": 2
    },
    "text_40": {
      "type": "text",
      "id": "text_40",
      "source_id": null,
      "content": "It doesn't take much to implement a new node type for Lens. However, make sure there isn't an existing node type that covers your needs. We would prefer that you adjust existing types and contribute back. If we'd all figure out a way to find common ground in our scientific language that would be awesome. :)"
    },
    "text_41": {
      "type": "text",
      "id": "text_41",
      "source_id": null,
      "content": "Anyway, let's create a new node type now. For the purpose of demonstration only, let's create a cat node type that you can reference in the main body of the document. The first thing to do is create a new folder in the lens-article repository /nodes/cat. The structure of that folder will be like this:"
    },
    "codeblock_13": {
      "type": "codeblock",
      "id": "codeblock_13",
      "source_id": "",
      "content": "index.js\ncat.js\ncat_view.js\ncat.css"
    },
    "text_42": {
      "type": "text",
      "id": "text_42",
      "source_id": null,
      "content": "Let's start by specifying the type definitions in cat.js."
    },
    "codeblock_14": {
      "type": "codeblock",
      "id": "codeblock_14",
      "source_id": "",
      "content": "var _ = require('underscore');\nvar Node = require('substance-document').Node;\n\nvar Cat = function(node, doc) {\n  Node.call(this, node, doc);\n};\n\n// Type definition\n// -----------------\n//\n\nCat.type = {\n  \"id\": \"cat\",\n  \"parent\": \"figure\",\n  \"properties\": {\n    \"name\": \"string\",\n    \"speed\": \"string\",\n    \"abilities\": [\"array\", \"string\"],\n  }\n};\n\nCat.prototype = Node.prototype\nCat.prototype.constructor = Cat;\n\n\n// Auto-generate property getters based on the type definition \n// --------\n\nvar getters = {};\n\n_.each(Cat.type.properties, function(prop, key) {\n  getters[key] = {\n    get: function() {\n      return this.properties[key];\n    }\n  };\n});\n\n\nObject.defineProperties(Cat.prototype, _.extend(getters, {\n  caption: {\n    // Used for \n    heading: function() {\n      return this.properties.\n    }\n  }\n}));\n\nmodule.exports = Cat;"
    },
    "text_43": {
      "type": "text",
      "id": "text_43",
      "source_id": null,
      "content": "That was easy. Now we need to implement a view for the Cat model we just defined. Here is cat_view.js."
    },
    "codeblock_15": {
      "type": "codeblock",
      "id": "codeblock_15",
      "source_id": "",
      "content": "var NodeView = require(\"../node\").View;\n\nvar CatView = function(node) {\n  NodeView.call(this, node);\n\n  this.$el.attr({id: node.id});\n  this.$el.addClass(\"content-node cat\");\n};\n\nCatView.Prototype = function() {\n\n  this.render = function() {\n    NodeView.prototype.render.call(this);\n    var node = this.node;\n\n    var html = [\n      '<div class=\"name\">'+this.cat+'</div>'\n      '<div class=\"speed\">'+this.speed+'</div>'\n      '<div class=\"abilities\">'+this.abilities.join(', ')+'</div>'\n    ].join('\\n');\n\n    this.content.innerHTML = html;\n\n    return this;\n  }\n};\n\n// CatView inherits from NodeView\nCatView.Prototype.prototype = NodeView.prototype;\nCatView.prototype = new CatView.Prototype();\n\nmodule.exports = CatView;"
    },
    "text_44": {
      "type": "text",
      "id": "text_44",
      "source_id": null,
      "content": "Add some styles in cat.css:"
    },
    "codeblock_16": {
      "type": "codeblock",
      "id": "codeblock_16",
      "source_id": "",
      "content": ".content-node.cat .name {\n  font-size: 20px;\n  color: green;\n}"
    },
    "text_45": {
      "type": "text",
      "id": "text_45",
      "source_id": null,
      "content": "By convention, there needs to be an index.js file in the repo."
    },
    "codeblock_17": {
      "type": "codeblock",
      "id": "codeblock_17",
      "source_id": "",
      "content": "module.exports = {\n  Model: require('./cat'),\n  View: require('./cat_view')\n};"
    },
    "text_46": {
      "type": "text",
      "id": "text_46",
      "source_id": null,
      "content": "Finally you have to register your new node type in nodes/index.js."
    },
    "codeblock_18": {
      "type": "codeblock",
      "id": "codeblock_18",
      "source_id": "",
      "content": "module.exports = {\n  ...\n  \"cat\": require(\"./cat\"),\n  ...\n};"
    },
    "text_47": {
      "type": "text",
      "id": "text_47",
      "source_id": null,
      "content": "Now in your actual document, you can specify and reference cat resources. It looks like so:"
    },
    "codeblock_19": {
      "type": "codeblock",
      "id": "codeblock_19",
      "source_id": "",
      "content": "{\n  id: \"example_doc\",\n  \"nodes\": {\n    ...\n    \"oliver\": {\n      \"id\": \"oliver\"\n      \"type\": \"cat\",\n      \"name\": \"Oliver\",\n      \"abilities\": [\"jump high\", \"eat much\", \"bite\", \"hunt mice\"],\n    },\n    \"paragraph_1\": {\n      \"id\": \"paragraph_1\",\n      \"type\": \"paragraph\",\n      \"content\": \"Last sunday I had much fun with Oliver the cat.\"\n    },\n    \"figure_reference_oliver\": {\n      \"id\":\"figure_reference_oliver\",\n      \"type\":\"figure_reference\",\n      \"path\": [\"paragraph_3\", \"content\"],\n      \"target\": \"oliver\",\n      \"range\":[31,37]\n    },\n    ...\n  }\n}"
    },
    "link_1": {
      "type": "link",
      "id": "link_1",
      "path": [
        "text_1",
        "content"
      ],
      "range": [
        139,
        144
      ],
      "url": "https://github.com/elifesciences/lens/tree/0.2.x"
    },
    "link_2": {
      "type": "link",
      "id": "link_2",
      "path": [
        "text_1",
        "content"
      ],
      "range": [
        227,
        240
      ],
      "url": "https://github.com/elifesciences/lens-manual/blob/master/manual.md"
    },
    "link_3": {
      "type": "link",
      "id": "link_3",
      "path": [
        "text_2",
        "content"
      ],
      "range": [
        0,
        10
      ],
      "url": "http://elifesciences.org/lens"
    },
    "link_4": {
      "type": "link",
      "id": "link_4",
      "path": [
        "text_4",
        "content"
      ],
      "range": [
        52,
        76
      ],
      "url": "http://github.com/substance/document"
    },
    "link_5": {
      "type": "link",
      "id": "link_5",
      "path": [
        "text_5",
        "content"
      ],
      "range": [
        191,
        208
      ],
      "url": "#lens/lens_article"
    },
    "code_1": {
      "type": "code",
      "id": "code_1",
      "path": [
        "text_12",
        "content"
      ],
      "range": [
        68,
        70
      ]
    },
    "code_2": {
      "type": "code",
      "id": "code_2",
      "path": [
        "text_12",
        "content"
      ],
      "range": [
        84,
        86
      ]
    },
    "code_3": {
      "type": "code",
      "id": "code_3",
      "path": [
        "text_12",
        "content"
      ],
      "range": [
        102,
        104
      ]
    },
    "code_4": {
      "type": "code",
      "id": "code_4",
      "path": [
        "text_12",
        "content"
      ],
      "range": [
        129,
        131
      ]
    },
    "code_5": {
      "type": "code",
      "id": "code_5",
      "path": [
        "text_12",
        "content"
      ],
      "range": [
        146,
        148
      ]
    },
    "code_6": {
      "type": "code",
      "id": "code_6",
      "path": [
        "text_12",
        "content"
      ],
      "range": [
        176,
        178
      ]
    },
    "code_7": {
      "type": "code",
      "id": "code_7",
      "path": [
        "text_12",
        "content"
      ],
      "range": [
        183,
        185
      ]
    },
    "code_8": {
      "type": "code",
      "id": "code_8",
      "path": [
        "text_13",
        "content"
      ],
      "range": [
        118,
        125
      ]
    },
    "code_9": {
      "type": "code",
      "id": "code_9",
      "path": [
        "text_13",
        "content"
      ],
      "range": [
        181,
        188
      ]
    },
    "code_10": {
      "type": "code",
      "id": "code_10",
      "path": [
        "text_13",
        "content"
      ],
      "range": [
        218,
        227
      ]
    },
    "link_6": {
      "type": "link",
      "id": "link_6",
      "path": [
        "text_14",
        "content"
      ],
      "range": [
        27,
        31
      ],
      "url": "http://jats.nlm.nih.gov/"
    },
    "link_7": {
      "type": "link",
      "id": "link_7",
      "path": [
        "text_14",
        "content"
      ],
      "range": [
        78,
        87
      ],
      "url": "http://github.com/elifesciences/lens-converter"
    },
    "link_8": {
      "type": "link",
      "id": "link_8",
      "path": [
        "text_15",
        "content"
      ],
      "range": [
        63,
        73
      ],
      "url": "http://www.w3.org/TR/2003/WD-DOM-Level-3-LS-20030619/load-save.html#LS-DOMParser"
    },
    "link_9": {
      "type": "link",
      "id": "link_9",
      "path": [
        "text_16",
        "content"
      ],
      "range": [
        208,
        213
      ],
      "url": "https://github.com/elifesciences/lens-converter/blob/0.1.x/src/configurations/elife.js"
    },
    "link_10": {
      "type": "link",
      "id": "link_10",
      "path": [
        "text_16",
        "content"
      ],
      "range": [
        215,
        232
      ],
      "url": "https://github.com/elifesciences/lens-converter/blob/0.1.x/src/configurations/landes.js"
    },
    "link_11": {
      "type": "link",
      "id": "link_11",
      "path": [
        "text_16",
        "content"
      ],
      "range": [
        237,
        241
      ],
      "url": "https://github.com/elifesciences/lens-converter/blob/0.1.x/src/configurations/plos.js"
    },
    "code_11": {
      "type": "code",
      "id": "code_11",
      "path": [
        "text_18",
        "content"
      ],
      "range": [
        70,
        82
      ]
    },
    "code_12": {
      "type": "code",
      "id": "code_12",
      "path": [
        "text_18",
        "content"
      ],
      "range": [
        96,
        106
      ]
    },
    "code_13": {
      "type": "code",
      "id": "code_13",
      "path": [
        "text_19",
        "content"
      ],
      "range": [
        167,
        173
      ]
    },
    "link_12": {
      "type": "link",
      "id": "link_12",
      "path": [
        "text_19",
        "content"
      ],
      "range": [
        336,
        352
      ],
      "url": "https://groups.google.com/forum/#!forum/elife-lens"
    },
    "link_13": {
      "type": "link",
      "id": "link_13",
      "path": [
        "text_22",
        "content"
      ],
      "range": [
        0,
        6
      ],
      "url": "http://johnmacfarlane.net/pandoc/installing.html"
    },
    "code_14": {
      "type": "code",
      "id": "code_14",
      "path": [
        "text_28",
        "content"
      ],
      "range": [
        73,
        112
      ]
    },
    "code_15": {
      "type": "code",
      "id": "code_15",
      "path": [
        "text_28",
        "content"
      ],
      "range": [
        169,
        209
      ]
    },
    "code_16": {
      "type": "code",
      "id": "code_16",
      "path": [
        "text_28",
        "content"
      ],
      "range": [
        224,
        258
      ]
    },
    "code_17": {
      "type": "code",
      "id": "code_17",
      "path": [
        "text_31",
        "content"
      ],
      "range": [
        202,
        220
      ]
    },
    "code_18": {
      "type": "code",
      "id": "code_18",
      "path": [
        "text_33",
        "content"
      ],
      "range": [
        107,
        132
      ]
    },
    "link_14": {
      "type": "link",
      "id": "link_14",
      "path": [
        "text_35",
        "content"
      ],
      "range": [
        11,
        17
      ],
      "url": "http://github.com"
    },
    "code_19": {
      "type": "code",
      "id": "code_19",
      "path": [
        "text_41",
        "content"
      ],
      "range": [
        96,
        99
      ]
    },
    "code_20": {
      "type": "code",
      "id": "code_20",
      "path": [
        "text_41",
        "content"
      ],
      "range": [
        219,
        231
      ]
    },
    "code_21": {
      "type": "code",
      "id": "code_21",
      "path": [
        "text_41",
        "content"
      ],
      "range": [
        243,
        253
      ]
    },
    "code_22": {
      "type": "code",
      "id": "code_22",
      "path": [
        "text_42",
        "content"
      ],
      "range": [
        50,
        56
      ]
    },
    "code_23": {
      "type": "code",
      "id": "code_23",
      "path": [
        "text_43",
        "content"
      ],
      "range": [
        55,
        58
      ]
    },
    "code_24": {
      "type": "code",
      "id": "code_24",
      "path": [
        "text_43",
        "content"
      ],
      "range": [
        90,
        101
      ]
    },
    "code_25": {
      "type": "code",
      "id": "code_25",
      "path": [
        "text_44",
        "content"
      ],
      "range": [
        19,
        26
      ]
    },
    "code_26": {
      "type": "code",
      "id": "code_26",
      "path": [
        "text_45",
        "content"
      ],
      "range": [
        36,
        44
      ]
    },
    "code_27": {
      "type": "code",
      "id": "code_27",
      "path": [
        "text_46",
        "content"
      ],
      "range": [
        51,
        65
      ]
    },
    "code_28": {
      "type": "code",
      "id": "code_28",
      "path": [
        "text_47",
        "content"
      ],
      "range": [
        59,
        62
      ]
    }
  }
}